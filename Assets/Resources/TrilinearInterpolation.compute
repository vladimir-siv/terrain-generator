#pragma kernel main

RWStructuredBuffer<float> _values;

float _step;
float _scale;
float _min;
float _max;

uint _target_count;
RWStructuredBuffer<float3> _targets;
RWStructuredBuffer<float> _target_values;

uint coord_to_index(float v) { return (uint)(v / _step); }
float index_to_coord(uint i) { return i * _step; }

[numthreads(1, 1, 1)]
void main(uint3 id: SV_DispatchThreadID)
{
	uint size1 = (uint)ceil(_scale / _step);
	uint size2 = size1 * size1;
	uint size3 = size2 * size1;

	float3 target = _targets[id.x];

	float x = target.x;
	float y = target.y;
	float z = target.z;

	uint i0 = coord_to_index(x);
	uint j0 = coord_to_index(y);
	uint k0 = coord_to_index(z);

	float x0 = index_to_coord(i0);
	float y0 = index_to_coord(j0);
	float z0 = index_to_coord(k0);

	float x1 = index_to_coord(i0 + 1);
	float y1 = index_to_coord(j0 + 1);
	float z1 = index_to_coord(k0 + 1);

	uint i1 = coord_to_index(x1);
	uint j1 = coord_to_index(y1);
	uint k1 = coord_to_index(z1);

	float xd = (x - x0) / (x1 - x0);
	float yd = (y - y0) / (y1 - y0);
	float zd = (z - z0) / (z1 - z0);

	float v000 = _values[i0 * size2 + j0 * size1 + k0];
	float v001 = _values[i0 * size2 + j0 * size1 + k1];
	float v010 = _values[i0 * size2 + j1 * size1 + k0];
	float v011 = _values[i0 * size2 + j1 * size1 + k1];
	float v100 = _values[i1 * size2 + j0 * size1 + k0];
	float v101 = _values[i1 * size2 + j0 * size1 + k1];
	float v110 = _values[i1 * size2 + j1 * size1 + k0];
	float v111 = _values[i1 * size2 + j1 * size1 + k1];

	float v00 = v000 * (1.0f - xd) + v100 * xd;
	float v01 = v001 * (1.0f - xd) + v101 * xd;
	float v10 = v010 * (1.0f - xd) + v110 * xd;
	float v11 = v011 * (1.0f - xd) + v111 * xd;

	float v0 = v00 * (1.0f - yd) + v10 * yd;
	float v1 = v01 * (1.0f - yd) + v11 * yd;

	float v = v0 * (1.0f - zd) + v1 * zd;

	_target_values[id.x] = v;
}
